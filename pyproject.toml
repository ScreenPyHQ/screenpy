[tool.black]
target-version = ['py311']

# This pyproject.toml is setup so it can be used with or without poetry and also
# supports editable installs (PEP 660) without breaking IDE and linter inspection.

# DEVELOPER INSTALL INSTRUCTIONS (assuming current directory is at the top of the project) :
# Poetry:
#   poetry install --extras dev
# PIP:
#   pip install -e .[dev]

[tool.poetry]
name = "screenpy"
version = "4.2.1"
description = "Screenplay pattern base for Python automated test suites."
authors = ["Perry Goy <perry.goy@gmail.com>"]
maintainers = ["Gabe Langton", "Marcel Wilson"]
license = "MIT"
repository = "https://github.com/ScreenPyHQ/screenpy"
documentation = "https://screenpy-docs.readthedocs.io"
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: BDD",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
]

# It's possible to add optional dependencies with the poetry CLI tool using:
#   poetry add --optional some_dev_pkg
# This will set `optional = true` flag in [tool.poetry.dependencies], as seen below
# But then you need to remember to manually edit the [tool.poetry.extras] dev section
# and declare the package. This allows `pip install .[dev]` to work as expected
# Poetry users will need to use the `--extras dev` option rather than the `--with dev`
# so we dont have two different sets of package versions to update.

[tool.poetry.dependencies]
python = "^3.8"
PyHamcrest = ">=2.0.0"
pydantic = "^1.10.7"
tomli = "^2.0.1"
importlib_metadata = {version = "*", python = "3.8.*"}

# convenience packages for development of screenpy only
pre-commit = {version = "*", optional = true}
pytest = {version = "*", optional = true}
tox = {version = "*", optional = true}
mypy = {version = "*", optional = true}
black = {version = "*", optional = true}
ruff = "^0.0.291"
coverage = {version = "*", optional = true}
screenpy-adapter_allure = {version = "^4.0.1", optional = true}
screenpy-appium = {version = "*", optional = true}
screenpy-playwright = {version = "*", optional = true}
screenpy-pyotp = {version = "^4.0.1", optional = true}
screenpy-requests = {version = "^4.0.1", optional = true}
screenpy-selenium = {version = "^4.0.3", optional = true}
sphinx = {version = "^6.1.3", optional = true}
autodoc-pydantic = {version = "^1.8.0", optional = true}
pytest-mock = {version = "*", optional = true}

[tool.poetry.extras]
allure = ["screenpy-adapter-allure"]
appium = ["screenpy-appium"]
playwright = ["screenpy-playwright"]
pyotp = ["screenpy-pyotp"]
requests = ["screenpy-requests"]
selenium = ["screenpy-selenium"]
dev = [
    "pre-commit",
    "pytest",
    "pytest-mock",
    "tox",
    "pylint",
]
dev_all = [
    "pre-commit",
    "pytest",
    "pytest-mock",
    "tox",
    "mypy",
    "black",
    "ruff",
    "coverage",
    "sphinx",
    "autodoc-pydantic",
]
test = [
    "pytest",
    "pytest-mock",
    "coverage",
]

[tool.ruff]
target-version = "py38"  # minimum supported version
line-length = 88  # same as Black.
select = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations
#    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
#    "D",  # pydocstyle
    "E",  # pycodestyle error
    "ERA",  # eradicate
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
#    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
#    "PERF",  # perflint
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
#    "RET",  # flake8-return
#    "RSE",  # flake8-raise
#    "RUF",  # ruff specific
#    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
#    "TRY",  # tryceratops
    "UP",  # python upgrade
    "W",  # pycodestyle warning
    "YTT",  # flake8-2020
    
    
    # would leave off
#    "FURB",  # refurb  # requires use of --preview
#    "ARG",  # flake8-unused-arguments  # more false positives than helpful
#    "BLE",  # flake8-blind-except  # we already use # pylint: disable=broad-except
#    "EM",  # flake8-errmsg  # very opinionated
#    "FBT",  # flake8-boolean-trap  # opinionated
]
ignore = [
    # temporary
    "E501", # line too long -- fixing those last
    
    
    "D107",  # missing __init__ docstring, we do that in the class docstring.
    "D203",  # one blank line before class; we want 2!
    "D212",  # multi line summary first line, we want a one line summary.
    "ANN101",  # missing self annotation, we only annotate self when we return it.
    "ANN401",  # no `**kwargs: Any` typing; unfortunately we don't have a better way.
    
    # should include to avoid issues
    
    # maybe just ignore in the files where needed?
    "A003", # Class attribute shadow builtin   
    "ANN102",  # cls  # mypy doesnt need it. will always be 'Self'
    "D200", # One-line docstring should fit on one line
    "PLR2004", # magic-value-comparison  # super opinionated
    
    # explicit is always better
    "PT003", # [*] `scope='function'` is implied in `@pytest.fixture()`
    "PT011", # `pytest.raises(ValueError)` is too broad -- REALLY?!
]   
# when we get done, we're gonig to want to be able to run `ruff .` against the whole
# project in github actions or tox.  For some reason setting these doesn't allow me to
# run `ruff .`
#include = [
#    "screenpy",
#    "tests",
#]
exclude = [
    "screenpy/__init__.py",
    "screenpy/__version__.py",
    "docs",
]


[tool.ruff.per-file-ignores]
"tests/*" = ["D"]
"setup.py" = ["D"]
"screenpy/actions/debug.py" = ["T100"] # T100 `pdb`, `breakpoint` found/used


[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["screenpy", "tests"]

[tool.ruff.flake8-pytest-style]
mark-parentheses = false


[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true


[tool.ruff.pydocstyle]
convention = "google"


#[tool.ruff.flake8-annotations]
#mypy-init-return = true


[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"
