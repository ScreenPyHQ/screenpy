[tool.black]
target-version = ['py312']

# This pyproject.toml is setup so it can be used with or without poetry and also
# supports editable installs (PEP 660) without breaking IDE and linter inspection.

# DEVELOPER INSTALL INSTRUCTIONS (assuming current directory is at the top of the project) :
# Poetry:
#   poetry install --extras dev
# PIP:
#   pip install -e .[dev]

extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
    | \/docs
    | ^/setup.py
)

'''

[tool.poetry]
name = "screenpy"
version = "4.2.2"
description = "Screenplay pattern base for Python automated test suites."
authors = ["Perry Goy <perry.goy@gmail.com>"]
maintainers = ["Gabe Langton", "Marcel Wilson"]
license = "MIT"
repository = "https://github.com/ScreenPyHQ/screenpy"
documentation = "https://screenpy-docs.readthedocs.io"
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: BDD",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
]


# It's possible to add optional dependencies with the poetry CLI tool using:
#   poetry add --optional some_dev_pkg
# This will set `optional = true` flag in [tool.poetry.dependencies], as seen below
# But then you need to remember to manually edit the [tool.poetry.extras] dev section
# and declare the package. This allows `pip install .[dev]` to work as expected
# Poetry users will need to use the `--extras dev` option rather than the `--with dev`
# so we dont have two different sets of package versions to update.

[tool.poetry.dependencies]
importlib_metadata = {version = "*", python = "3.8.*"}
pydantic = "^1.10.7"
PyHamcrest = ">=2.0.0"
python = "^3.8"
tomli = "^2.0.1"
typing_extensions = ">=4.8.0"

# convenience packages for development of screenpy only
autodoc-pydantic = {version = "*", optional = true}
black = {version = "*", optional = true}
coverage = {version = "*", optional = true}
mypy = {version = "*", optional = true}
pre-commit = {version = "*", optional = true}
pytest = {version = "*", optional = true}
pytest-mock = {version = "*", optional = true}
ruff = {version = "*", optional = true}
screenpy-adapter_allure = {version = "^4.0.1", optional = true}
screenpy-appium = {version = "*", optional = true}
screenpy-playwright = {version = "*", optional = true}
screenpy-pyotp = {version = "^4.0.1", optional = true}
screenpy-requests = {version = "^4.0.1", optional = true}
screenpy-selenium = {version = "^4.0.3", optional = true}
sphinx = {version = "*", optional = true}
tox = {version = "*", optional = true}


[tool.poetry.extras]
allure = ["screenpy-adapter-allure"]
appium = ["screenpy-appium"]
playwright = ["screenpy-playwright"]
pyotp = ["screenpy-pyotp"]
requests = ["screenpy-requests"]
selenium = ["screenpy-selenium"]
dev = [
    "pre-commit",
    "pytest-mock",
    "pytest",
    "tox",
]
dev_all = [
    "autodoc-pydantic",
    "black",
    "coverage",
    "mypy",
    "pre-commit",
    "pytest-mock",
    "pytest",
    "ruff",
    "sphinx",
    "tox",
]
test = [
    "coverage",
    "pytest-mock",
    "pytest",
]


[tool.ruff]
target-version = "py38"  # minimum supported version
line-length = 88  # same as Black.
select = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations  # coming back to this one later to compare against mypy
    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specific
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TRY",  # tryceratops
    "UP",  # python upgrade
    "W",  # pycodestyle warning
    "YTT",  # flake8-2020

    # we would like these someday, but not yet
    # "FURB",  # refurb
]
ignore = [
    "D107",  # missing __init__ docstring, we do that in the class docstring.
    "D203",  # one blank line before class docstring, no thanks!
    "D212",  # multi line summary first line, we want a one line summary.
    "ANN101",  # missing self annotation, we only annotate self when we return it.
    "ANN102",  # missing cls annotation, we only annotate cls when we return it.
]
exclude = [
    "screenpy/__init__.py",
    "screenpy/__version__.py",
    "docs",
]


[tool.ruff.per-file-ignores]
"tests/**" = [
    "D",  # we don't need public-API-polished docstrings in tests.
    "FBT",  # using a boolean as a test object is useful!
    "PLR",  # likewise using specific numbers and strings in tests.
]
"tests/test_pacing.py" = [
    "FA100",  # we are purposely testing pacing without future annotations.
]


[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["screenpy", "tests"]


[tool.ruff.flake8-pytest-style]
mark-parentheses = false


[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true


[tool.ruff.pydocstyle]
convention = "google"


[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"
